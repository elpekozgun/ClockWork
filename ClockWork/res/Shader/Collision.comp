#version 450 core

#extension GL_NV_shader_atomic_float: enable

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct Box
{
	vec3 Min;
	uint Id;
	vec3 Max;
};

layout(std430, binding = 1) buffer BoxBuffer1 
{
	Box boxes1[];
};

layout(std430, binding = 2) buffer BoxBuffer2
{
	Box boxes2[];
};

layout(std430, binding = 3) buffer CollisionBuffer
{
	vec2 CollisionIndex[];
};

layout(binding = 4) uniform atomic_uint Counter;

void main()
{
	uint gid = gl_GlobalInvocationID.x;

	if(gid >= boxes1.length() * boxes2.length())
		return;

	uint i = gid / boxes2.length();
	uint j = gid % boxes2.length();

	if(i == j)
		return;

	Box box1 = boxes1[i];
	Box box2 = boxes2[j];

	bool intersect = true;
	for(int k = 0; k < 3; k++)
	{
		if(box1.Max[k] < box2.Min[k] || box1.Min[k] > box2.Max[k])
		{
			intersect = false;
			break;
		}
	}

	if(intersect)
	{
		uint index = atomicCounterIncrement(Counter);
            CollisionIndex[index] = vec2(box1.Id, box2.Id);
	}
    memoryBarrierBuffer();
}

